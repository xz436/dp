1. unique paths---------------------------------->前两道题滚动数组:滚动数组要是二维数组一般就得留两行，然后对于行量取%2
  public int uniquePaths(int m, int n) {
        // write your code here 
        int[][] f = new int[2][n];
        //f[i][j]:number of paths to arrive [m - 1][n - 1]
    
        for(int i = 0; i < 2; i++){
            f[i][0] = 1;
        }
        for(int i = 0; i < n; i++){
            f[0][i] = 1;
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                f[i%2][j] = f[i%2][j - 1] + f[(i - 1)%2][j];
            }
        }
        return f[(m-1)%2][n-1];
    }
2. unique paths II
就是遇到1就不能走了
 public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        if(obstacleGrid == null || obstacleGrid.length == 0){
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        //记得单独讨论只有一个点，且为1
        if(m == 1 && n == 1 && obstacleGrid[0][0] == 1){
            return 1;
        }
        int[][] f = new int[m][n];
        for(int i = 0; i < m; i++){
            if(obstacleGrid[i][0] == 1){
                f[i][0] = 0;
                break;
            }
            f[i][0] = 1; 
        }
        for(int i = 0; i < n; i++){
            //这个地方要写成obstacleGrid[i][0] == 1而不是f[][]
            if(obstacleGrid[0][i] == 1){
                f[0][i] = 0;
                break;
            }
            f[0][i] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    f[i][j] = 0;
                }
                else{
                    f[i][j] = f[i][j - 1] + f[i - 1][j];
                }
            }
        }
        return f[m - 1][n - 1];
    }
还有更好的方法！！！！！！
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        if(obstacleGrid == null || obstacleGrid[0].length == 0){
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[] f = new int[n];
        f[0] = 1;
    //这题我真是给他跪了。。。一维数组的解法太好了，都不用给第一行，
    //第一列赋初值,只要把f[0]=1写好就okay乐。。。
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    f[j] = 0;
                }
                else{
                    if(j > 0){
                        f[j] += f[j - 1];
                    }
                      
                }
              
            }
        }
        return f[n - 1];
    }
3. climbing stairs
注意int输入的时候无需讨论n是否为null，而且这道题要考虑n==0直接return
因为要不然f[1] = 1写出来的时候就相当于超界了
然后滚动数组！
 public int climbStairs(int n) {
        // write your code here
        // if(n == null){
        //     return 0;
        // }
        if(n == 0){
            return 1;
        }
        int[] f = new int[3];
        f[0] = 1;
        f[1] = 1;
        for(int i = 2; i <= n; i++){
            f[i%3] = f[(i - 1)%3] + f[(i - 2)%3];
        }
        return f[n%3];
    }
4. minimum path sum
 public int minPathSum(int[][] grid) {
        // write your code here
        if(grid == null || grid.length == 0){
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[][] f = new int[m][n];
        //注意f[0][0]要单独弄出来赋值 要不然就冒了
        f[0][0] = grid[0][0];
        for(int i = 1; i < n; i++){
            f[0][i] = f[0][i - 1] + grid[0][i];
        }
        for(int i = 1; i < m; i++){
            f[i][0] = f[i - 1][0] + grid[i][0];
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                f[i][j] = Math.min(f[i][j - 1], f[(i - 1)][j]) + grid[i][j];
            }
        }
        return f[(m - 1)][n - 1];
    }
5. triangle
给定一个三角形，然后求一个route从顶到底，给出root的最小值
利用dp
public int minimumTotal(int[][] triangle) {
        if(triangle == null || triangle.length == 0){
            return 0;
        }
        int m = triangle.length;
        int n = triangle[m - 1].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i < n; i++){
            dp[m - 1][i] = triangle[m - 1][i]; 
        }
        for(int i = m - 2; i >= 0; i--){
            for(int j = 0; j <= i; j++){
                //注意状态方程的表示，题要求min还是max，是底下的两个取一个值，然后加上本身的值，千万别忘了
                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j];
            }
        }
        return dp[0][0];
    }
6. jump game
看能不能从一个跳到另一个点
第一种方法dp，时间复杂度o(n*n)
 public boolean canJump(int[] A) {
        // wirte your code here
        if(A == null || A.length == 0){
            return false;
        }
        boolean[] f = new boolean[A.length + 1];
        f[0] = true;
        //when there is only one element in the array
        f[1] = true;
        for(int i = 2; i <= A.length; i++){
            for(int j = 1; j < i; j++){
                if(f[j] && (j + A[j - 1] >= i)){
                    f[i] = true;
                }
            }
        }
        return f[A.length];
    }
第二种方法：贪心
不懂最后为啥到了right就不跳了。。。
 public boolean canJump(int[] nums) {
 /*维护一个right (表示右边能跳到的最远的点），从左往右扫描，根据当前可跳的步骤不断更新right ,
 	当right到达终点，即可返回true. 若更新完right后，right未动，并且index = right，而且这时没到达终点，
 	代表我们不可能到达终点了。（当前index的可跳值应该是0）。*/
        if(nums == null || nums.length <=1){
            return true;
        }
        int right = 0;
        for(int i = 0; i < nums.length; i++){
            right = Math.max(right, i + nums[i]);
            if(right >= nums.length - 1){
                return true;
            }
            if(i == right){
                return false;
            }
        }
        return false;
        
    }
7. jump game II
跟上个题类似，这回让你求蹦到最后一个点需要多少步
方法一：dp，注意f[0] = 0不是1
然后写for的时候先要给f[i]付成i，因为不优化最大就得蹦i步才能蹦到坐标i
 public int jump(int[] A) {
        // write your code here
        if(A == null || A.length <= 1){
            return 0;
        }
        
        int[] f = new int[A.length];
        f[0] = 0;
        for(int i = 1; i < A.length; i++){
            f[i] = i;
            for(int j = 0; j < i; j++){
                if(j + A[j] >= i){
                    f[i] = Math.min(f[i], f[j] + 1);
                }
            }
        }
        return f[A.length - 1];
    }



 方法二：贪心
  //method2:贪心
    //两个指针，一个start,end。 update end by for(start-end)最远能达到的值
    //start = 原来的end + 1
 public int jump(int[] A) {
    if(A == null || A.length <= 1){
            return 0;
        }
        int start = 0, end = 0, count = 0;
        while(end < A.length){
            int max = 0;
            count++;
            for(int i = start; i <= end; i++){
                max = Math.max(max, i + A[i]);
                if(max >= A.length - 1){
                    return count;
                }
            }
            //一定要先更新start，要不然end就变了
            start = end + 1;
            end = max;
            
        }
        return count;
    
    }
