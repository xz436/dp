1. unique paths---------------------------------->前两道题滚动数组:滚动数组要是二维数组一般就得留两行，然后对于行量取%2
  public int uniquePaths(int m, int n) {
        // write your code here 
        int[][] f = new int[2][n];
        //f[i][j]:number of paths to arrive [m - 1][n - 1]
    
        for(int i = 0; i < 2; i++){
            f[i][0] = 1;
        }
        for(int i = 0; i < n; i++){
            f[0][i] = 1;
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                f[i%2][j] = f[i%2][j - 1] + f[(i - 1)%2][j];
            }
        }
        return f[(m-1)%2][n-1];
    }
2. unique paths II
就是遇到1就不能走了
 public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        if(obstacleGrid == null || obstacleGrid.length == 0){
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        //记得单独讨论只有一个点，且为1
        if(m == 1 && n == 1 && obstacleGrid[0][0] == 1){
            return 1;
        }
        int[][] f = new int[m][n];
        for(int i = 0; i < m; i++){
            if(obstacleGrid[i][0] == 1){
                f[i][0] = 0;
                break;
            }
            f[i][0] = 1; 
        }
        for(int i = 0; i < n; i++){
            //这个地方要写成obstacleGrid[i][0] == 1而不是f[][]
            if(obstacleGrid[0][i] == 1){
                f[0][i] = 0;
                break;
            }
            f[0][i] = 1;
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    f[i][j] = 0;
                }
                else{
                    f[i][j] = f[i][j - 1] + f[i - 1][j];
                }
            }
        }
        return f[m - 1][n - 1];
    }
还有更好的方法！！！！！！
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        if(obstacleGrid == null || obstacleGrid[0].length == 0){
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[] f = new int[n];
        f[0] = 1;
    //这题我真是给他跪了。。。一维数组的解法太好了，都不用给第一行，
    //第一列赋初值,只要把f[0]=1写好就okay乐。。。
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j] == 1){
                    f[j] = 0;
                }
                else{
                    if(j > 0){
                        f[j] += f[j - 1];
                    }
                      
                }
              
            }
        }
        return f[n - 1];
    }
3. climbing stairs
注意int输入的时候无需讨论n是否为null，而且这道题要考虑n==0直接return
因为要不然f[1] = 1写出来的时候就相当于超界了
然后滚动数组！
 public int climbStairs(int n) {
        // write your code here
        // if(n == null){
        //     return 0;
        // }
        if(n == 0){
            return 1;
        }
        int[] f = new int[3];
        f[0] = 1;
        f[1] = 1;
        for(int i = 2; i <= n; i++){
            f[i%3] = f[(i - 1)%3] + f[(i - 2)%3];
        }
        return f[n%3];
    }
4. minimum path sum
 public int minPathSum(int[][] grid) {
        // write your code here
        if(grid == null || grid.length == 0){
            return 0;
        }
        int m = grid.length;
        int n = grid[0].length;
        int[][] f = new int[m][n];
        //注意f[0][0]要单独弄出来赋值 要不然就冒了
        f[0][0] = grid[0][0];
        for(int i = 1; i < n; i++){
            f[0][i] = f[0][i - 1] + grid[0][i];
        }
        for(int i = 1; i < m; i++){
            f[i][0] = f[i - 1][0] + grid[i][0];
        }
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                f[i][j] = Math.min(f[i][j - 1], f[(i - 1)][j]) + grid[i][j];
            }
        }
        return f[(m - 1)][n - 1];
    }
5. triangle
给定一个三角形，然后求一个route从顶到底，给出root的最小值
利用dp
public int minimumTotal(int[][] triangle) {
        if(triangle == null || triangle.length == 0){
            return 0;
        }
        int m = triangle.length;
        int n = triangle[m - 1].length;
        int[][] dp = new int[m][n];
        for(int i = 0; i < n; i++){
            dp[m - 1][i] = triangle[m - 1][i]; 
        }
        for(int i = m - 2; i >= 0; i--){
            for(int j = 0; j <= i; j++){
                //注意状态方程的表示，题要求min还是max，是底下的两个取一个值，然后加上本身的值，千万别忘了
                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j];
            }
        }
        return dp[0][0];
    }
6. jump game
看能不能从一个跳到另一个点
第一种方法dp，时间复杂度o(n*n)
 public boolean canJump(int[] A) {
        // wirte your code here
        if(A == null || A.length == 0){
            return false;
        }
        boolean[] f = new boolean[A.length + 1];
        f[0] = true;
        //when there is only one element in the array
        f[1] = true;
        for(int i = 2; i <= A.length; i++){
            for(int j = 1; j < i; j++){
                if(f[j] && (j + A[j - 1] >= i)){
                    f[i] = true;
                }
            }
        }
        return f[A.length];
    }
第二种方法：贪心
不懂最后为啥到了right就不跳了。。。
 public boolean canJump(int[] nums) {
 /*维护一个right (表示右边能跳到的最远的点），从左往右扫描，根据当前可跳的步骤不断更新right ,
 	当right到达终点，即可返回true. 若更新完right后，right未动，并且index = right，而且这时没到达终点，
 	代表我们不可能到达终点了。（当前index的可跳值应该是0）。*/
        if(nums == null || nums.length <=1){
            return true;
        }
        int right = 0;
        for(int i = 0; i < nums.length; i++){
            right = Math.max(right, i + nums[i]);
            if(right >= nums.length - 1){
                return true;
            }
            if(i == right){
                return false;
            }
        }
        return false;
        
    }
7. jump game II
跟上个题类似，这回让你求蹦到最后一个点需要多少步
方法一：dp，注意f[0] = 0不是1
然后写for的时候先要给f[i]付成i，因为不优化最大就得蹦i步才能蹦到坐标i
 public int jump(int[] A) {
        // write your code here
        if(A == null || A.length <= 1){
            return 0;
        }
        
        int[] f = new int[A.length];
        f[0] = 0;
        for(int i = 1; i < A.length; i++){
            f[i] = i;
            for(int j = 0; j < i; j++){
                if(j + A[j] >= i){
                    f[i] = Math.min(f[i], f[j] + 1);
                }
            }
        }
        return f[A.length - 1];
    }



 方法二：贪心
  //method2:贪心
    //两个指针，一个start,end。 update end by for(start-end)最远能达到的值
    //start = 原来的end + 1
 public int jump(int[] A) {
    if(A == null || A.length <= 1){
            return 0;
        }
        int start = 0, end = 0, count = 0;
        while(end < A.length){
            int max = 0;
            count++;
            for(int i = start; i <= end; i++){
                max = Math.max(max, i + A[i]);
                if(max >= A.length - 1){
                    return count;
                }
            }
            //一定要先更新start，要不然end就变了
            start = end + 1;
            end = max;
            
        }
        return count;
    
    }
--------------------------------------------------------------------------------------------------------------
Oct.24
--------------------------------------------------------------------------------------------------------------
8. word break
dp,没有string的时候得返回true，为了后面的两个for做准备。因为dict中最长的词也没多长，
所以先把dict中最长的词长度求出来
然后注意一下string中substring的使用，判断最后那个数是不是==.length() - 1-->substring(i)/substring(i, j + 1)
public boolean wordBreak(String s, Set<String> dict) {
        // write your code here   
        if(s == null || s.length() == 0){
            return true;
        }
        //f[i]: whether first i elements can be broken into words
        boolean[] f = new boolean[s.length() + 1];
        f[0] = true;
        int m = 0;
        for(String x: dict){
            m = Math.max(m, x.length());
        }
        for(int i = 1; i <= s.length(); i++){
            //.....j-1[j....i - 1]----these are index
            for(int j = i - 1; j >= 0 && i - j <= m; j--){
                if(f[j] && isWord(s, j, i - 1, dict)){
                    f[i] = true;
                    break;
                }
            }
        }
        return f[s.length()];
    }
    private boolean isWord(String s, int i, int j, Set<String> dict){
        if(s == null){
            return true;
        }
        if(i > j){
            return false;
        }
        if(j == s.length() - 1){
            return dict.contains(s.substring(i));
        }
        return dict.contains(s.substring(i, j + 1));
    }
9. palindrome partitionaing II
给定一个string，看把这个string都切成palindrome最少需要多少步
这里需要注意的是f[0] = -1因为后面for的需要，就是比如给定一个string是abba，f[4] = f[0] + 1实际上不需要切，即f[4] = 0
所以f[0] = -1
public int minCut(String s) {
        // write your code here
        if(s == null || s.length() == 0){
            return 0;
        }
        //num of min cuts needed for the first i elements
        int[] f = new int[s.length() + 1];
        f[0] = -1;
        for(int i = 1; i <= s.length(); i++){
            f[i] = i - 1;
            for(int j = 0; j < i; j++){
                if(isPalindrome(j, i - 1, s)){
                    f[i] = Math.min(f[i], f[j] + 1);
                }
            }
        }
        return f[s.length()];
    }
    private boolean isPalindrome(int start, int end, String s){
        if(s == null || s.length() <= 1 || start == end){
            return true;
        }
        if(start > end || end > s.length() - 1){
            return false;
        }
        for(int i = start, j = end; i < j; i++, j--){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
        }
        return true;
    }
10. longest increasing subsequence
给一个数组[54123] LIS 表示位置不变的递增（取等也ok，要跟面试官确认）子序列，这个子序列他们之间不一定要连续
这题第二个for从j = 1开始就ok，然后f[i]附了初值都是1，然后记得返回的是max，而不是f[nums.legnth]
public int longestIncreasingSubsequence(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0){
            return 0;
        }
        //f[i] num of longest increasing subsequence that ends at the ith element
        int[] f = new int[nums.length + 1];
        f[0] = 0;
        f[1] = 1;
        int max = 0;
        for(int i = 2; i <= nums.length; i++){
            f[i] = 1;
            for(int j = 1; j < i; j++){
                if(nums[i - 1] >= nums[j - 1]){
                f[i] = Math.max(f[i], f[j] + 1);
                }
            }
            max = Math.max(max, f[i]);
        }
        return max;
    }
11. edit distance
给定两个单词，可以insert/delete,replace求至少需要edit多少次可以把他们变成一样的
f[][]表示第一个单词的前i个字母跟第二个单词的前j个单词匹配需要多少edit
algorithm:if 那两个单词相同----f[i][j] = Math.min(Math.min(f[i][j - 1], f[i - 1][j]) + 1,f[i - 1][j - 1]);
不同：f[i][j] = Math.min(f[i - 1][j], Math.min(f[i][j - 1], f[i - 1][j - 1])) + 1;
public int minDistance(String word1, String word2) {
        // write your code here
        if(word1 == null || word1.length() == 0){
            return word2.length();
        }
        if(word2 == null || word2.length() == 0){
            return word1.length();
        }
        //f[][]: num of edit for first i elements in word1, and first j elements in word2
        int[][] f = new int[word1.length() + 1][word2.length() + 1];
        for(int i = 0; i <= word1.length(); i++){
            f[i][0] = i;
        }
        for(int i = 0; i <= word2.length(); i++){
            f[0][i] = i;
        }
        for(int i = 1; i <= word1.length(); i++){
            for(int j = 1; j <= word2.length(); j++){
                if(word1.charAt(i - 1) == word2.charAt(j - 1)){
                    f[i][j] = Math.min(Math.min(f[i][j - 1], f[i - 1][j]) + 1,f[i - 1][j - 1]);
                }
                else{
                    f[i][j] = Math.min(f[i - 1][j], Math.min(f[i][j - 1], f[i - 1][j - 1])) + 1;
                }
            }
        }
        return f[word1.length()][word2.length()];
    }
12. longest common substring
就是给定两个string，找最长公共子序列，必须连续
f[i][j] 表示以i,j结尾的前i个，前j个最长公共子序列的个数
f[i][j] = f[i - 1][j - 1] + 1;\0
注意结果是要取max
  public int longestCommonSubstring(String A, String B) {
        // write your code here
        if(A == null || A.length() == 0 || B == null || B.length() == 0){
            return 0;
        }
        //f[][]: longest common substring for first i letters in A, first j letters in B
        int[][] f = new int[A.length() + 1][B.length() + 1];
        for(int i = 0; i <= A.length(); i++){
            f[i][0] = 0;
        }
        for(int j = 0; j <= B.length(); j++){
            f[0][j] = 0;
        }
        //max: longest substring
        int max = 0;
        for(int i = 1; i <= A.length(); i++){
            for(int j = 1; j <= B.length(); j++){
                if(A.charAt(i - 1) == B.charAt(j - 1)){
                    //since the last element has to be included in the substring
                    f[i][j] = f[i - 1][j - 1] + 1;
                }
                else{
                    f[i][j] = 0; 
                }
                max = Math.max(max, f[i][j]);
            }
            
        }
        return max;  
    }
13. longest common subsequence
这个和上个题不同的地方就是substring需要连续的，这个不用
所以substring是以i,j为结尾，所以转换方程是f[i - 1][j - 1] + 1/0
这个f[i - 1][j - 1] + 1/f[i - 1][j], f[i][j - 1]
public int longestCommonSubsequence(String A, String B) {
        // write your code here
        if(A == null || A.length() == 0 || B == null || B.length() == 0){
            return 0;
        }
        int[][] f = new int[A.length() + 1][B.length() + 1];
        for(int i = 0; i <= A.length(); i++){
            f[i][0] = 0;
        }
        for(int i = 0; i <= B.length(); i++){
            f[0][i] = 0;
        }
        int max = 0;
        for(int i = 1; i <= A.length(); i++){
            for(int j = 1; j <= B.length(); j++){
                if(A.charAt(i - 1) == B.charAt(j - 1)){
                    f[i][j] = f[i - 1][j - 1] + 1;
                }
                else{
                    f[i][j] = Math.max(f[i - 1][j], f[i][j - 1]);
                }
                max = Math.max(max, f[i][j]);
            }
        }
        return max;
    }

14. distinct subsequences

就是用dp但是状态转移方程有点难想
讨论最后一个字符是否一样，要是一样f[i][j] = f[i - 1][j];
two situation: the last character has never shown before + the last character has shown before, rrabbitt. rabbit
不一样的话f[i][j] = f[i - 1][j];
 public int numDistinct(String S, String T) {
        // write your code here
        if(S == null || T == null){
            return 0;
        }
        //f[][]:num of distinct subsequences for the first i elements in S and first
        //j elements in T
        int[][] f= new int[S.length() + 1][T.length() + 1];
        //null can also be counted as a subsequence
        for(int i = 0; i <= S.length(); i++){
            f[i][0] = 1;
        }
        for(int i = 1; i <= T.length(); i++){
            f[0][i] = 0;
        }
        for(int i = 1; i <= S.length(); i++){
            for(int j = 1; j <= T.length(); j++){
                if(S.charAt(i - 1) != T.charAt(j - 1)){
                    f[i][j] = f[i - 1][j];
                }
                else{
                    //two situation: the last character has never shown before + the last character has shown before, rrabbitt. rabbit
                    f[i][j] = f[i - 1][j - 1] + f[i - 1][j];    
                }
                
            }
        }
        return f[S.length()][T.length()];
    }
15. interleaving String
dp求解，思路就是f[i][j]表示第一个string的前i个element，和第二个string的前j个element能不能组成s3的前(i + j)个字母
这里注意初始化，然后两个for的表达式if...f[][] = true;
 public boolean isInterleave(String s1, String s2, String s3) {
        // write your code here
        if(s1 == null){
            return s3.equals(s2);
        }
        if(s2 == null){
            return s3.equals(s1);
        }
        if(s3.length() != (s1.length() + s2.length())){
            return false;
        }
        //f[i][j]:can the first elements in s1, first j elements in s2 make the first (i + j) elements in s3
        boolean[][] f = new boolean[s1.length() + 1][s2.length() + 1];
        for(int i = 0; i <= s1.length(); i++){
            f[i][0] = s3.substring(0, i).equals(s1.substring(0, i));
        }
        for(int i = 0; i <= s2.length(); i++){
            f[0][i] = s3.substring(0, i).equals(s2.substring(0, i));
        }
        // f[0][s2.length()] = s3.equals(s2);
        // f[s1.length()][0] = s3.equals(s1);
        for(int i = 1; i <= s1.length(); i++){
            for(int j = 1; j <= s2.length(); j++){
                if((s3.charAt(i + j - 1) == s1.charAt(i - 1) && f[i - 1][j]) || (s3.charAt(i + j - 1) == s2.charAt(j - 1) && f[i][j - 1])){
                    f[i][j] = true; 
                }
                
            }
        }
        return f[s1.length()][s2.length()];
    }

16.backpack
给定一个数组，数组每个数都代表这个东西的size，m代表size of a backPack
要求max，即max是把里面的选出合适的size，然后使得总和小于等于m
public int backPack(int m, int[] A) {
        // write your code here
        //f[i][j]:whether the first i elements can make j
        if(A == null || A.length == 0){
            return 0;
        }
        boolean[][] f = new boolean[2][m + 1];
        
        for(int i = 1; i <= m; i++){
            f[0][i] = false;
        }
        
        for(int i = 0; i <= 1; i++){
            f[i][0] = true; 
        }
        
        for(int i = 1; i <= A.length; i++){
            for(int j = 1; j <= m; j++){
                f[i%2][j] = f[(i - 1)%2][j] || ( j - A[i - 1] >= 0 && f[(i - 1)%2][j - A[i - 1]]);
            }
        }
        int max = 0;
        for(int i = 1; i <= m; i++){
            if(f[A.length%2][i]){
                max = Math.max(max, i);
            }
        }
        return max;
    }
17. backpack II
就是给定一个数组里面代表每个东西的size，然后给了一个值m表示最多size不能超过m，然后给了一个数组V表示
每个东西对应的value，让你求出最大的value
dp：f[i][j]:表示max value，for前i个element，然后总size为j的时候、然后写转移方程的时候
就考虑第i个放到包里还是不放到包里
public int backPackII(int m, int[] A, int V[]) {
        // write your code here
        if(A == null || V == null){
            return 0;
        }
        //f[i][j]: the max value we can get when we have the first i elements
        //with the total size j
        
        //dp fun: f[i][j] = 1.f[i - 1][j]---dont put the ith element inside the bag
                    //2. = f[i - 1][j - A[i - 1]] + V[i - 1]--put the ith element in bag: on the condition that j-A[i - 1]>=0 and then get max
        int[][] f = new int[A.length + 1][m + 1];
        for(int i = 0; i <= A.length; i++){
            f[i][0] = 0;
        }
        for(int i = 0; i <= m; i++){
            f[0][i] = 0;
        }
        for(int i = 1; i <= A.length; i++){
            for(int j = 1; j <= m; j++){
                f[i][j] = f[i - 1][j];//not put ith element in bag
                if(j >= A[i - 1]){
                    f[i][j] = Math.max(f[i - 1][j], f[i - 1][j - A[i - 1]] + V[i -1]); 
                }
            }
        }
        return f[A.length][m];
    }

























